[{"path":"https://ben18785.github.io/frbayes/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 frbayes authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ben18785.github.io/frbayes/articles/bayesian_fitting.html","id":"real-data","dir":"Articles","previous_headings":"","what":"Real data","title":"Bayesian fitting to real data","text":"show fit model real data Bythotrephes spp., water fleas, prey items different sizes. first load data visualise .  fit generalised Holling model “large” prey-size data using maximum likelihood estimation. rate prey get eaten given expression: b⋅prey1+q1+b⋅h⋅prey1+q, \\frac{b \\cdot \\text{prey}^{1 + q}}{1 + b \\cdot h \\cdot \\text{prey}^{1 + q}}, b>0b>0, 0<h<10<h<1 q>0q>0. now examine fit model data.","code":"# peak at data glimpse(frbayes::bythotrephes) #> Rows: 72 #> Columns: 4 #> $ n_prey_initial   <int> 1, 1, 1, 3, 3, 3, 2, 2, 2, 4, 4, 4, 6, 6, 6, 8, 8, 8,… #> $ n_prey_eaten     <int> 1, 1, 0, 3, 2, 3, 2, 2, 2, 4, 3, 4, 6, 4, 6, 7, 7, 4,… #> $ n_prey_remaining <int> 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 1, 4,… #> $ size             <fct> large, large, large, large, large, large, large, larg…  # plot by prey size frbayes::bythotrephes %>%   ggplot(aes(x = n_prey_initial, y = n_prey_eaten)) +   geom_jitter(height = 0.3) +   facet_wrap(~size) f_likelihood <- function(theta) {   parameters <- list(b = 1, h = 0.4, q = 0.01)   parameters[1] <- theta[1]   parameters[2] <- theta[2]   parameters[3] <- theta[3]   -log_probability(     parameters = parameters,     data = frbayes::bythotrephes %>% dplyr::filter(size == \"large\"),     model = model_generalised_holling(),     n_replicates = 1000   ) }  # use R's standard optim fit <- optim(   c(1.5, 0.2, 0.1),   f_likelihood,   lower = c(0.01, 0.01, 0.01),   upper = c(5, 1, 1.5) ) #> Warning in optim(c(1.5, 0.2, 0.1), f_likelihood, lower = c(0.01, 0.01, 0.01), : #> bounds can only be used with method L-BFGS-B (or Brent)  # output pars b <- fit$par[1] h <- fit$par[2] q <- fit$par[3] print(paste0(\"b = \", b, \", h = \", h, \", q = \", q)) #> [1] \"b = 1.49994877750089, h = 0.200027502012945, q = 0.100048128522654\" experimental_setup <- frbayes::bythotrephes %>%   filter(size == \"large\") %>%   group_by(n_prey_initial) %>%   count() %>%   mutate(n_replicates = 10000) # choose a large number here to explore full predictive distribution  # generate synthetic data at max likelihood estimates mle_parameters <- list(b = b, h = h, q = q) df_sim <- simulate_study(   data = experimental_setup,   time_max = 1,   model = model_generalised_holling(),   parameters = mle_parameters )  # plot frbayes::bythotrephes %>%   filter(size == \"large\") %>%   ggplot(aes(x = as.factor(n_prey_initial), y = n_prey_eaten)) +   geom_violin(data = df_sim) +   geom_jitter(height = 0.2, width = 0.1) +   xlab(\"n_prey_initial\")"},{"path":"https://ben18785.github.io/frbayes/articles/bayesian_fitting.html","id":"bayesian-fitting","dir":"Articles","previous_headings":"","what":"Bayesian fitting","title":"Bayesian fitting to real data","text":"can also fit model Bayesian framework, using random walk Metropolis algorithm – oldest simplest variant Markov chain Monte Carlo (MCMC) algorithm. use package takes input log-probability function run MCMC; provide code Metropolis-Hastings. use algorithm, also need specify priors parameters, , specify b∼U(0,10)b\\sim U(0, 10), h∼U(0,1)h\\sim U(0, 1) q∼U(0,2)q\\sim U(0, 2).  , clearly iterations necessary order obtain convergence. mainly due model relatively complicated relative relatively data points used fit .","code":"log_posterior <- function(parameters) {   b <- parameters$b   h <- parameters$h   q <- parameters$q   log_prior <- (     if_else(b < 0 | b > 10, -Inf, 1 / 10) +       if_else(h < 0 | h > 1, -Inf, 1) +       if_else(q < 0 | q > 2, -Inf, 1 / 2)   )   if (log_prior == -Inf) {     return(-Inf)   }   log_likelihood <- log_probability(     parameters = parameters,     data = frbayes::bythotrephes %>% dplyr::filter(size == \"large\"),     model = model_generalised_holling(),     n_replicates = 1000   )   log_likelihood + log_prior }  propose_parameters <- function(parameters_current, step_sizes) {   b <- parameters_current$b   h <- parameters_current$h   q <- parameters_current$q   b_p <- rnorm(1, b, step_sizes$b)   h_p <- rnorm(1, h, step_sizes$h)   q_p <- rnorm(1, q, step_sizes$q)   list(b = b_p, h = h_p, q = q_p) }  step_accept_reject <- function(parameters_current, step_sizes) {   parameters_proposed <- propose_parameters(parameters_current, step_sizes)   log_p_current <- log_posterior(parameters_current)   log_p_proposed <- log_posterior(parameters_proposed)   log_r <- log(runif(1))   if (log_r < (log_p_proposed - log_p_current)) {     parameters_new <- parameters_proposed   } else {     parameters_new <- parameters_current   }   parameters_new }  mcmc <- function(n_iterations, parameters_initial, step_sizes) {   df <- data.frame(iteration = rep(NA, (n_iterations + 1))) %>%     mutate(       b = NA,       h = NA,       q = NA     )   df$iteration[1] <- 0   df$b[1] <- parameters_initial$b   df$h[1] <- parameters_initial$h   df$q[1] <- parameters_initial$q   parameters_current <- parameters_initial   for (i in 1:n_iterations) {     parameters_new <- step_accept_reject(parameters_current, step_sizes)     df$iteration[i + 1] <- i     df$b[i + 1] <- parameters_new$b     df$h[i + 1] <- parameters_new$h     df$q[i + 1] <- parameters_new$q     parameters_current <- parameters_new   }   df }  # run MCMC - takes a few minutes max_iterations <- 400 chain <- mcmc(   n_iterations = max_iterations,   list(b = 5, h = 0.17, q = 1),   list(b = 0.5, h = 0.05, q = 0.05) )  # print acceptance rate mean(diff(chain$b) != 0) #> [1] 0.34  # plot results chain %>%   pivot_longer(c(b, h, q)) %>%   filter(iteration > max_iterations / 2) %>% # remove warm-up iterations   ggplot(aes(x = iteration, y = value)) +   geom_line() +   facet_wrap(~name, scales = \"free\")"},{"path":[]},{"path":"https://ben18785.github.io/frbayes/articles/introduction_to_frbayes.html","id":"stochastic-models","dir":"Articles","previous_headings":"Synthetic study","what":"Stochastic models","title":"Introduction to frbayes","text":"first show can fit functional response model synthetically generated data, parameters process known. assume data generating process stochastic Rogers-II-type model, process assumed follow chemical reaction equation form: prey→rateprey−1, \\text{prey} \\xrightarrow{\\text{rate}} \\text{prey} - 1,  prey\\text{prey} means number prey remaining point time, rate reaction given : rate=⋅prey1+⋅h⋅prey, \\text{rate} = \\frac{\\cdot \\text{prey}}{1 + \\cdot h \\cdot \\text{prey}}, aa capture rate hh handling time. , assume true data generating process represented model =2a=2 h=0.1h=0.1. can simulate one experiment, suppose initial number prey 10 experiment takes place maximum 5 time units. , show number prey eaten (10 - number prey remaining) increases time. number prey eaten reaches 10, initial number prey, prey eat experiment ends.  simulation method stochastic, meaning get variety trajectories time experiment run. show now 10 trajectories.","code":"# rogersII parameters true_parameters <- list(a = 2, h = 0.1)  # stochastic simulation df_single_replicate <- simulate_trajectory(   n_prey_initial = 10,   time_max = 5,   model = model_rogersII(),   parameters = true_parameters )  # plot df_single_replicate %>%   ggplot(aes(x = time, y = n_prey_eaten)) +   geom_step() +   scale_y_continuous(n.breaks = 10) +   scale_x_continuous(limits = c(0, 5)) # generate trajectories df_all_trajectories <- simulate_many_trajectories(   n_trajectories = 10,   n_prey_initial = 10,   time_max = 5,   model = model_rogersII(),   parameters = true_parameters )  # plot df_all_trajectories %>%   ggplot(aes(     x = time,     y = n_prey_eaten,     group = as.factor(trajectory_id)   )) +   geom_step(alpha = 0.5) +   scale_y_continuous(n.breaks = 10)"},{"path":"https://ben18785.github.io/frbayes/articles/introduction_to_frbayes.html","id":"typical-experiment-setup","dir":"Articles","previous_headings":"Synthetic study","what":"Typical experiment setup","title":"Introduction to frbayes","text":"typical experiment, time chosen observe number prey eaten. , assume time=1\\text{time}=1. effectively means slice trajectories time record number prey point: , gives us number prey eaten roughly ranges 4-9.  Usually, experiments repeat exercise variety experimental conditions, particularly across range initial prey counts. now replicate one experiment. suppose 100 replicates performed initial prey counts : 5, 10, 20, 30, 40, system observed time=1time=1. Using experimental setup, can simulate output running one experiment.","code":"# plot slice df_all_trajectories %>%   ggplot(aes(     x = time,     y = n_prey_eaten,     group = as.factor(trajectory_id)   )) +   geom_step(alpha = 0.5) +   scale_y_continuous(n.breaks = 10) +   geom_vline(xintercept = 1, linetype = 2, colour = \"orange\") # experiment details experimental_setup <- data.frame(   n_prey_initial = c(5, 10, 20, 30, 40),   n_replicates = 100 )  # generate synthetic data df <- simulate_study(   data = experimental_setup,   time_max = 1,   model = model_rogersII(),   parameters = true_parameters )  # plot data df %>%   ggplot(aes(x = n_prey_initial, y = n_prey_eaten)) +   geom_jitter(height = 0.3)"},{"path":"https://ben18785.github.io/frbayes/articles/introduction_to_frbayes.html","id":"fitting-to-an-experiments-data","dir":"Articles","previous_headings":"Synthetic study","what":"Fitting to an experiment’s data","title":"Introduction to frbayes","text":"now fit model data using maximum likelihood estimation. , use log_probability function. first show log-likelihood varies aa varied hh fixed true value. log-likelihood little rough (owing stochasticity calculate ), peaked near value used generate data.  Similarly , hh.  can also look 2D likelihood surface. , mark true parameter set point.  now perform optimisation estimate single maximum likelihood set (,h)(,h). mark MLE values cross 2D likelihood surface.","code":"as <- seq(1, 4, 0.1) log_likelihood <- vector(length = length(as))  for (i in seq_along(as)) {   parameters <- list(a = as[i], h = true_parameters$h)   log_likelihood[i] <- log_probability(     parameters = parameters,     data = df,     model = model_rogersII(),     n_replicates = 10000   ) }  # plot tibble(a = as, log_likelihood = log_likelihood) %>%   ggplot(aes(x = a, y = log_likelihood)) +   geom_line() +   geom_vline(     xintercept = true_parameters$a,     linetype = 2,     colour = \"orange\"   ) hs <- seq(0.01, 0.25, 0.01) log_likelihood <- vector(length = length(hs))  for (i in seq_along(hs)) {   parameters <- list(a = true_parameters$a, h = hs[i])   log_likelihood[i] <- log_probability(     parameters = parameters,     data = df,     model = model_rogersII(),     n_replicates = 1000   ) }  # plot tibble(h = hs, log_likelihood = log_likelihood) %>%   ggplot(aes(x = h, y = log_likelihood)) +   geom_line() +   geom_vline(     xintercept = true_parameters$h,     linetype = 2,     colour = \"orange\"   ) parameter_combinations <- expand_grid(a = as, h = hs) parameter_combinations$z <- NA for (i in seq_along(parameter_combinations$a)) {   parameters <- list(     a = parameter_combinations$a[i],     h = parameter_combinations$h[i]   )   z <- log_probability(     parameters = parameters,     data = df,     model = model_rogersII(),     n_replicates = 1000   ) # smaller sample   parameter_combinations$z[i] <- z }  # plot ggplot(parameter_combinations, aes(x = a, y = h, fill = z)) +   geom_raster() +   scale_fill_viridis_c() + # Using continuous viridis color scale   theme_minimal() +   geom_point(data = data.frame(h = true_parameters$h, a = true_parameters$a)) +   geom_contour(aes(z = z), color = \"white\") #> Warning: The following aesthetics were dropped during statistical transformation: fill. #> ℹ This can happen when ggplot fails to infer the correct grouping structure in #>   the data. #> ℹ Did you forget to specify a `group` aesthetic or to convert a numerical #>   variable into a factor? # set a function to minimise f_likelihood <- function(theta) {   parameters <- list(a = 1.5, h = 0.1) #  these are dummy values   parameters[1] <- theta[1]   parameters[2] <- theta[2]   -log_probability( # minus sign needed as optim minimises     parameters = parameters,     data = df,     model = model_rogersII(),     n_replicates = 10000   ) }  # use R's standard optim fit <- optim(   c(1.5, 0.1),   f_likelihood,   lower = c(0.01, 0.01),   upper = c(5, 0.25) ) #> Warning in optim(c(1.5, 0.1), f_likelihood, lower = c(0.01, 0.01), upper = c(5, #> : bounds can only be used with method L-BFGS-B (or Brent)  # output pars a <- fit$par[1] h <- fit$par[2] mle_parameters <- list(a = a, h = h) print(paste0(\"a = \", a, \", h = \", h)) #> [1] \"a = 1.66091547763581, h = 0.0926565914165091\" # overlay on 2D plot ggplot(parameter_combinations, aes(x = a, y = h, fill = z)) +   geom_raster() +   scale_fill_viridis_c() + # Using continuous viridis color scale   theme_minimal() +   geom_point(data = data.frame(h = true_parameters$h, a = true_parameters$a)) +   geom_point(data = data.frame(h = h, a = a), shape = 4, size = 4) +   geom_contour(aes(z = z), color = \"white\") #> Warning: The following aesthetics were dropped during statistical transformation: fill. #> ℹ This can happen when ggplot fails to infer the correct grouping structure in #>   the data. #> ℹ Did you forget to specify a `group` aesthetic or to convert a numerical #>   variable into a factor?"},{"path":"https://ben18785.github.io/frbayes/articles/introduction_to_frbayes.html","id":"model-diagnostics","dir":"Articles","previous_headings":"Synthetic study","what":"Model diagnostics","title":"Introduction to frbayes","text":"now examine fit model data generating data simulation using parameter estimates obtained optimisation. view, fits look reasonable.  can also plot empirical cumulative distribution function (eCDF) versus model-simulated eCDFs. model fitted data reasonable, expect lines overlap y=xy=x line. , plot value n_prey_initial across 100 bootstrapped samples. model fit isn’t perfect perhaps owing difficulty maximising likelihood .  sanity check, repeat checks using true parameter values. shows slightly reasonable fit.","code":"experimental_setup <- data.frame(   n_prey_initial = c(5, 10, 20, 30, 40),   n_replicates = 1000 )  # generate synthetic data at max likelihood estimates df_sim <- simulate_study(   data = experimental_setup,   time_max = 1,   model = model_rogersII(),   parameters = mle_parameters )  # plot df %>%   ggplot(aes(x = as.factor(n_prey_initial), y = n_prey_eaten)) +   geom_violin(data = df_sim) +   geom_jitter(height = 0.3, alpha = 0.8) +   xlab(\"n_prey_initial\") # generate ecdfs n_bootstraps <- 100 df_ecdfs_both <- create_bootstrapped_ecdf_real_simulated(   n_bootstraps = n_bootstraps,   data = df,   time_max = 1,   model = model_rogersII(),   mle_parameters = mle_parameters )  # plot df_ecdfs_both %>%   ggplot(aes(x = ecdf_real, y = ecdf_sim, group = as.factor(bootstrap_id))) +   geom_line(alpha = 0.5) +   facet_wrap(~n_prey_initial) +   geom_abline(linetype = 2, colour = \"orange\") # generate ecdfs n_bootstraps <- 100 df_ecdfs_both <- create_bootstrapped_ecdf_real_simulated(   n_bootstraps = n_bootstraps,   data = df,   time_max = 1,   model = model_rogersII(),   mle_parameters = true_parameters )  # plot df_ecdfs_both %>%   ggplot(aes(x = ecdf_real, y = ecdf_sim, group = as.factor(bootstrap_id))) +   geom_line(alpha = 0.5) +   facet_wrap(~n_prey_initial) +   geom_abline(linetype = 2, colour = \"orange\")"},{"path":"https://ben18785.github.io/frbayes/articles/stochasticity_in_likelihood.html","id":"chemical-reaction-equations","dir":"Articles","previous_headings":"","what":"Chemical reaction equations","title":"Stochasticity in the likelihood","text":"functional response-type experiments, number prey initially colocated predators. time, predators eat prey diminish. Often, numbers prey experiments relatively , meaning stochasticity important, package explicitly models using chemical reaction equations (CREs). type CRE package assumes form: prey→rateprey−1, \\text{prey} \\xrightarrow{\\text{rate}} \\text{prey} - 1, prey\\text{prey} means number prey remaining point time, rate reaction given function, F(prey;θ)F(\\text{prey};\\theta), θ\\theta (potentially vector ) parameter values. type model inherently stochastic meaning even parameter values fixed, likely time model run, results differ. simple model F(prey;θ)F(\\text{prey};\\theta) : F(prey)=rate×prey F(\\text{prey}) = \\text{rate} \\times \\text{prey} rate>0\\text{rate}>0 dictates speed prey eaten. type model known stochastic degradation model. illustrate model works, can simulate frbayes , hood, uses Gillespie algorithm. assume arbitrary parameter value: rate=0.1\\text{rate}=0.1 perform simulation suppose initially 10 prey.  model stochastic, time run, different trajectory can occur. now simulate 100 trajectories.","code":"# stochastic degradation parameters true_parameters <- list(rate = 0.2)  # stochastic simulation df_single_replicate <- simulate_trajectory(   n_prey_initial = 10,   time_max = 20, # time at which to stop recording if still some prey remaining   model = model_stochastic_degradation(),   parameters = true_parameters )  # plot df_single_replicate %>%   ggplot(aes(x = time, y = n_prey_eaten)) +   geom_step() +   scale_y_continuous(n.breaks = 10) +   scale_x_continuous(limits = c(0, 20)) # perform simulations df_all_trajectories <- simulate_many_trajectories(   n_trajectories = 100,   n_prey_initial = 10,   time_max = 10,   model = model_stochastic_degradation(),   parameters = true_parameters )  # plot df_all_trajectories %>%   ggplot(aes(     x = time,     y = n_prey_eaten,     group = as.factor(trajectory_id)   )) +   geom_step(alpha = 0.5) +   scale_y_continuous(n.breaks = 10) +   scale_x_continuous(limits = c(0, 15)) #> Warning: Removed 19 rows containing missing values or values outside the scale range #> (`geom_step()`)."},{"path":"https://ben18785.github.io/frbayes/articles/stochasticity_in_likelihood.html","id":"calculating-probabilities","dir":"Articles","previous_headings":"Chemical reaction equations","what":"Calculating probabilities","title":"Stochasticity in the likelihood","text":"CREs, generally possible write probability distribution describes data point time. stochastic degradation model rare exception . case, possible derive formula, describes number prey remaining given observation time: exp(−rate⋅prey⋅time)⋅(nprey)⋅(1−exp(−rate⋅time))n−prey \\exp(-\\text{rate} \\cdot \\text{prey} \\cdot \\text{time}) \\cdot        \\binom{n}{\\text{prey}} \\cdot       \\left(1 - \\exp(-\\text{rate} \\cdot \\text{time})\\right)^{n - \\text{prey}}  simply substituting prey=n−ne\\text{prey} = n - n_e, nen_e number prey eaten, obtain distribution number prey eaten: exp(−rate⋅(n−ne)⋅time)⋅(nn−ne)⋅(1−exp(−rate⋅time))n−ne \\exp(-\\text{rate} \\cdot (n - n_e) \\cdot \\text{time}) \\cdot        \\binom{n}{n-n_e} \\cdot       \\left(1 - \\exp(-\\text{rate} \\cdot \\text{time})\\right)^{n_ - n_e} can plot distribution time=5\\text{time}=5 rate=0.2\\text{rate}=0.2 number initial prey, n=10n=10.  can compare distribution model simulations slice time=5\\text{time}=5.  Looking empirical histogram slide, typical ranges implied analytical distribution, mostly 3≤ne≤93\\leq n_e \\leq 9, supported simulations.","code":"analytical_pmf <- function(n_prey_eaten, n_prey_initial, t, rate) {   exp(-rate * (n_prey_initial - n_prey_eaten) * t) * (     choose(n_prey_initial, n_prey_initial - n_prey_eaten) *       (1 - exp(-rate * t))^n_prey_eaten) }  # generate pmf values n_prey_initial <- 10 n_prey_eaten <- 0:10 # all possible values obs_time <- 5 pmf_values <- analytical_pmf(   n_prey_eaten, n_prey_initial,   obs_time,   rate = true_parameters$rate )  # plot analytical_pmf_df <- dplyr::tibble(   n_prey_eaten,   pmf = pmf_values ) %>%   mutate(type = \"analytical\")  analytical_pmf_df %>%   ggplot(aes(x = n_prey_eaten, y = pmf)) +   geom_col() +   scale_x_continuous(n.breaks = 10) # plot df_all_trajectories %>%   ggplot(aes(     x = time,     y = n_prey_eaten,     group = as.factor(trajectory_id)   )) +   geom_step(alpha = 0.5) +   scale_y_continuous(n.breaks = 10) +   scale_x_continuous(limits = c(0, 15)) +   geom_vline(xintercept = 5, linetype = 2, colour = \"orange\") #> Warning: Removed 19 rows containing missing values or values outside the scale range #> (`geom_step()`). # plot histogram df_all_trajectories %>%   dplyr::filter(time <= 5) %>%   group_by(trajectory_id) %>%   summarise(n_prey_eaten = last(n_prey_eaten)) %>%   ggplot(aes(x = n_prey_eaten)) +   geom_histogram() +   scale_x_continuous(     n.breaks = 10,     limits = c(0, 10)   ) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_bar()`)."},{"path":"https://ben18785.github.io/frbayes/articles/stochasticity_in_likelihood.html","id":"approximating-the-probability-distribution","dir":"Articles","previous_headings":"Chemical reaction equations","what":"Approximating the probability distribution","title":"Stochasticity in the likelihood","text":"illustrates way approximate true probability distribution CREs: just perform lots simulations, use empirical distribution place true distribution. approach underlies frbayes package. perform 100 trajectories, empirical distribution rough approximation true distribution.  increase number simulations, generally get better approximation.","code":"create_empirical_pmf <- function(     df_all_trajectories,     time_obs) {   # all possible numbers of prey remaining   df_all <- dplyr::tibble(n_prey_eaten = 0:n_prey_initial)    # empirical distribution   df_all_trajectories %>%     dplyr::filter(time <= time_obs) %>%     group_by(trajectory_id) %>%     summarise(n_prey_eaten = last(n_prey_eaten)) %>%     group_by(n_prey_eaten) %>%     count() %>%     right_join(df_all, by = \"n_prey_eaten\") %>%     tidyr::replace_na(list(n = 0)) %>%     arrange(n_prey_eaten) %>%     ungroup() %>%     mutate(pmf = n / sum(n)) %>%     select(-n) }  # plot create_empirical_pmf(df_all_trajectories, 5) %>%   mutate(type = \"empirical\") %>%   bind_rows(analytical_pmf_df) %>%   ggplot(aes(x = n_prey_eaten, y = pmf)) +   geom_col(aes(fill = type), position = position_dodge2()) +   scale_x_continuous(n.breaks = 10) +   scale_fill_brewer(palette = \"Dark2\") df_all_trajectories <- simulate_many_trajectories(   n_trajectories = 10000,   n_prey_initial = 10,   time_max = 10,   model = model_stochastic_degradation(),   parameters = true_parameters )  # plot create_empirical_pmf(df_all_trajectories, 5) %>%   mutate(type = \"empirical\") %>%   bind_rows(analytical_pmf_df) %>%   ggplot(aes(x = n_prey_eaten, y = pmf)) +   geom_col(aes(fill = type), position = position_dodge2()) +   scale_x_continuous(n.breaks = 10) +   scale_fill_brewer(palette = \"Dark2\")"},{"path":"https://ben18785.github.io/frbayes/articles/stochasticity_in_likelihood.html","id":"conclusion","dir":"Articles","previous_headings":"Chemical reaction equations","what":"Conclusion","title":"Stochasticity in the likelihood","text":"functional response models frbayes considers examples chemical reaction equation models (CREs). bar isolated cases, possible write probability distribution describing data simulations generate. , using one rare instances fact possible, shown performing many simulations can relatively accurately determine true probability distribution. simulation-based approach determining probability distribution underlies log_probability function frbayes. means seeking maximum likelihood estimate, new value parameter considered, new set simulations must performed order approximate probability distribution. ’ve shown , generally, number simulations increases, accuracy reconstructed probability distributions improves. using frbayes, suggest using relatively large numbers simulation replicates order increase accuracy likelihood calculations. increased accuracy can substantially improve efficiency reliability algorithms seeking obtain either maximum likelihood parameter values posterior distribution Bayesian inference.","code":""},{"path":"https://ben18785.github.io/frbayes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ben Lambert. Author, maintainer. Cait Newport. Author.","code":""},{"path":"https://ben18785.github.io/frbayes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lambert B, Newport C (2024). frbayes: Estimating Functional Response Models Using Stochastic Models Population Dynamics. R package version 0.0.0.9000, https://ben18785.github.io/frbayes/.","code":"@Manual{,   title = {frbayes: Estimating Functional Response Models Using Stochastic Models Of Population Dynamics},   author = {Ben Lambert and Cait Newport},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://ben18785.github.io/frbayes/}, }"},{"path":"https://ben18785.github.io/frbayes/index.html","id":"frbayes","dir":"","previous_headings":"","what":"Estimating Functional Response Models Using Stochastic Models Of Population Dynamics","title":"Estimating Functional Response Models Using Stochastic Models Of Population Dynamics","text":"goal frbayes estimate functional response models using stochastic models population dynamics.","code":""},{"path":"https://ben18785.github.io/frbayes/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Estimating Functional Response Models Using Stochastic Models Of Population Dynamics","text":"can install development version frbayes GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ben18785/frbayes\")"},{"path":"https://ben18785.github.io/frbayes/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Estimating Functional Response Models Using Stochastic Models Of Population Dynamics","text":"first show can examine fit functional response model synthetically generated data, parameters process known. assume data generating process stochastic Rogers-II-type model, process assumed follow chemical reaction equation form: prey→rateprey−1, \\text{prey} \\xrightarrow{\\text{rate}} \\text{prey} - 1, rate reaction given : rate=⋅prey1+⋅h⋅prey, \\text{rate} = \\frac{\\cdot \\text{prey}}{1 + \\cdot h \\cdot \\text{prey}}, aa capture rate hh handling time. , assume synthetic data =2a=2 h=0.1h=0.1. suppose 100 replicates performed initial prey counts : 5, 10, 20, 30, 40, generate possible observed dataset experimental setup.  now assess likelihood using log_probability function. show log-likelihood varies aa varied hh fixed true value.","code":"library(frbayes) #>  #> Attaching package: 'frbayes' #> The following object is masked from 'package:stats': #>  #>     simulate library(ggplot2) library(purrr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(tidyr)   # experiment details experimental_setup <- data.frame(   n_prey_initial = c(5, 10, 20, 30, 40),   n_replicates = 100 )  # generate synthetic data true_parameters <- list(a = 2, h = 0.1) df <- simulate_study(   data = experimental_setup,   time_max = 1,   model = model_rogersII(),   parameters = true_parameters )  # plot data df %>%   ggplot(aes(x = n_prey_initial, y = n_prey_eaten)) +   geom_jitter(height = 0.3) as <- seq(1, 4, 0.1) log_likelihood <- vector(length = length(as))  for (i in seq_along(as)) {   parameters <- list(a = as[i], h = true_parameters$h)   log_likelihood[i] <- log_probability(     parameters = parameters,     data = df,     model = model_rogersII(),     n_replicates = 10000   ) }  # plot tibble(a = as, log_likelihood = log_likelihood) %>%   ggplot(aes(x = a, y = log_likelihood)) +   geom_line() +   geom_vline(xintercept = true_parameters$a, linetype = 2)"},{"path":"https://ben18785.github.io/frbayes/reference/bythotrephes.html","id":null,"dir":"Reference","previous_headings":"","what":"Bythotrephes Functional Response Data — bythotrephes","title":"Bythotrephes Functional Response Data — bythotrephes","text":"Functional response dataset Bythotrephes spp. (water fleas) preying prey items different sizes.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/bythotrephes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bythotrephes Functional Response Data — bythotrephes","text":"","code":"bythotrephes"},{"path":"https://ben18785.github.io/frbayes/reference/bythotrephes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bythotrephes Functional Response Data — bythotrephes","text":"data frame following columns: n_prey_initial integer. initial density prey. n_prey_eaten integer. number prey eaten. n_prey_remaining integer. number prey left alive. size factor levels 'small', 'medium', 'large'. size prey items.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/bythotrephes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Bythotrephes Functional Response Data — bythotrephes","text":"Daniel Barrios-O'Neill's Frair GitHub: https://github.com/dpritchard/frair","code":""},{"path":"https://ben18785.github.io/frbayes/reference/bythotrephes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bythotrephes Functional Response Data — bythotrephes","text":"Bythotrephes spp. (water fleas) preying prey items different sizes. Prey replaced experiment, total experimental time 12 hours. Provides example dataset type-III flexible exponent models.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/bythotrephes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bythotrephes Functional Response Data — bythotrephes","text":"","code":"data(bythotrephes)"},{"path":"https://ben18785.github.io/frbayes/reference/construct_empirical_pmf_log_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Empirical PMF with Log Probabilities — construct_empirical_pmf_log_df","title":"Construct Empirical PMF with Log Probabilities — construct_empirical_pmf_log_df","text":"function constructs dataframe containing empirical probability mass function (PMF) logarithm simulation results. computes PMF using Dirichlet Process posterior mean, uniform prior possible values n_prey_remaining. resulting dataframe includes PMF logarithm possible value n_prey_remaining.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/construct_empirical_pmf_log_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Empirical PMF with Log Probabilities — construct_empirical_pmf_log_df","text":"","code":"construct_empirical_pmf_log_df(simulation_result, n_prey_initial, alpha)"},{"path":"https://ben18785.github.io/frbayes/reference/construct_empirical_pmf_log_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Empirical PMF with Log Probabilities — construct_empirical_pmf_log_df","text":"simulation_result dataframe containing simulation results column n_prey_remaining indicating number prey remaining. n_prey_initial integer representing initial number prey. defines range possible values n_prey_remaining. alpha numeric value representing hyperparameter Dirichlet Process prior. controls influence prior posterior calculation.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/construct_empirical_pmf_log_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct Empirical PMF with Log Probabilities — construct_empirical_pmf_log_df","text":"tibble following columns: n_prey_remaining integer indicating number prey remaining. pmf empirical probability mass function value n_prey_remaining. log_prob logarithm PMF.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/construct_empirical_pmf_log_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct Empirical PMF with Log Probabilities — construct_empirical_pmf_log_df","text":"PMF computed using Dirichlet Process posterior mean, prior measure uniform across possible values n_prey_remaining. PMF adjusted hyperparameter alpha, logarithm calculated value.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/construct_empirical_pmf_log_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct Empirical PMF with Log Probabilities — construct_empirical_pmf_log_df","text":"","code":"# Example usage with hypothetical simulation results and parameters simulation_result <- tibble::tibble(n_prey_remaining = c(0, 1, 1, 2, 2, 2, 3)) n_prey_initial <- 3 alpha <- 1  # Construct the empirical PMF with log probabilities df_pmf_log <- frbayes:::construct_empirical_pmf_log_df(simulation_result, n_prey_initial, alpha) print(df_pmf_log) #> # A tibble: 4 × 3 #>   n_prey_remaining   pmf log_prob #>              <dbl> <dbl>    <dbl> #> 1                0 0.156   -1.86  #> 2                1 0.281   -1.27  #> 3                2 0.406   -0.901 #> 4                3 0.156   -1.86"},{"path":"https://ben18785.github.io/frbayes/reference/create_approx_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Approximate Counts from Simulation Results — create_approx_counts","title":"Create Approximate Counts from Simulation Results — create_approx_counts","text":"function processes dataframe simulation results count occurrences value n_prey_remaining. ensures possible values n_prey_remaining 0 n_prey_initial represented, even observed simulation. replaces missing values zero provides complete dataframe counts possible value.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_approx_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Approximate Counts from Simulation Results — create_approx_counts","text":"","code":"create_approx_counts(simulation_result, n_prey_initial)"},{"path":"https://ben18785.github.io/frbayes/reference/create_approx_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Approximate Counts from Simulation Results — create_approx_counts","text":"simulation_result dataframe containing simulation results column n_prey_remaining indicating number prey remaining. n_prey_initial integer representing initial number prey. defines range possible values n_prey_remaining.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_approx_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Approximate Counts from Simulation Results — create_approx_counts","text":"tibble two columns: n_prey_remaining integer indicating number prey remaining. n integer indicating count occurrences value n_prey_remaining. Missing values replaced zero.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_approx_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Approximate Counts from Simulation Results — create_approx_counts","text":"","code":"# Example simulation result simulation_result <- tibble::tibble(n_prey_remaining = c(0, 1, 1, 2, 2, 2, 3))  # Generate approximate counts frbayes:::create_approx_counts(simulation_result, n_prey_initial = 3) #> # A tibble: 4 × 2 #>   n_prey_remaining     n #>              <dbl> <int> #> 1                0     1 #> 2                1     2 #> 3                2     3 #> 4                3     1"},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_ecdf_real_simulated.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Bootstrapped ECDFs for Real and Simulated Data — create_bootstrapped_ecdf_real_simulated","title":"Create Bootstrapped ECDFs for Real and Simulated Data — create_bootstrapped_ecdf_real_simulated","text":"function computes empirical cumulative distribution functions (ECDFs) real bootstrapped simulated data, combines results single data frame.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_ecdf_real_simulated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Bootstrapped ECDFs for Real and Simulated Data — create_bootstrapped_ecdf_real_simulated","text":"","code":"create_bootstrapped_ecdf_real_simulated(   n_bootstraps,   data,   time_max,   model,   mle_parameters )"},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_ecdf_real_simulated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Bootstrapped ECDFs for Real and Simulated Data — create_bootstrapped_ecdf_real_simulated","text":"n_bootstraps integer representing number bootstrap samples generate. data data frame containing real data columns n_prey_initial n_prey_eaten. time_max numeric value indicating maximum time simulation. model function calculates propensity given current number prey parameters. mle_parameters list named parameters required model function.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_ecdf_real_simulated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Bootstrapped ECDFs for Real and Simulated Data — create_bootstrapped_ecdf_real_simulated","text":"data frame columns n_prey_eaten, ecdf_sim, ecdf_real, n_prey_initial, bootstrap_id, representing ECDF values real bootstrapped simulated data.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_ecdf_real_simulated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Bootstrapped ECDFs for Real and Simulated Data — create_bootstrapped_ecdf_real_simulated","text":"function first generates bootstrapped samples simulated data, computes ECDF number prey eaten unique value n_prey_initial real simulated data, combines results single data frame comparison.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_ecdf_real_simulated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Bootstrapped ECDFs for Real and Simulated Data — create_bootstrapped_ecdf_real_simulated","text":"","code":"# Example real data experimental_setup <- data.frame(   n_prey_initial = c(10, 20, 30),   n_replicates = c(100, 100, 100) ) time_max <- 10 model <- model_stochastic_degradation() parameters <- list(rate = 0.1) data <- simulate_study(experimental_setup, time_max, model, parameters)  # Suppose this maximum likelihood estimate mle_parameters <- list(rate = 0.1)  # Create bootstrapped ECDFs for real and simulated data ecdfs_both <- create_bootstrapped_ecdf_real_simulated(   n_bootstraps = 10,   data = data,   time_max = time_max,   model = model,   mle_parameters = mle_parameters )"},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_ecdf_simulated.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Bootstrapped ECDFs for Simulated Data — create_bootstrapped_ecdf_simulated","title":"Create Bootstrapped ECDFs for Simulated Data — create_bootstrapped_ecdf_simulated","text":"function computes empirical cumulative distribution functions (ECDFs) bootstrapped samples simulated data.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_ecdf_simulated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Bootstrapped ECDFs for Simulated Data — create_bootstrapped_ecdf_simulated","text":"","code":"create_bootstrapped_ecdf_simulated(df_bootstrap_samples)"},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_ecdf_simulated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Bootstrapped ECDFs for Simulated Data — create_bootstrapped_ecdf_simulated","text":"df_bootstrap_samples data frame containing bootstrapped samples columns bootstrap_id, n_prey_initial, n_prey_eaten.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_ecdf_simulated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Bootstrapped ECDFs for Simulated Data — create_bootstrapped_ecdf_simulated","text":"data frame columns n_prey_eaten, ecdf_sim, n_prey_initial, bootstrap_id, representing ECDF values bootstrapped sample.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_ecdf_simulated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Bootstrapped ECDFs for Simulated Data — create_bootstrapped_ecdf_simulated","text":"function calculates ECDF number prey eaten unique value n_prey_initial bootstrapped samples. ECDF computed bootstrap replicate separately, results combined single data frame.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Bootstrapped Samples — create_bootstrapped_samples","title":"Create Bootstrapped Samples — create_bootstrapped_samples","text":"function generates bootstrapped samples given dataset simulating study multiple times using specified model parameters.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Bootstrapped Samples — create_bootstrapped_samples","text":"","code":"create_bootstrapped_samples(   n_bootstraps,   data,   time_max,   model,   mle_parameters )"},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Bootstrapped Samples — create_bootstrapped_samples","text":"n_bootstraps integer representing number bootstrap samples generate. data data frame containing experimental data, include column n_prey_initial. time_max numeric value indicating maximum time simulation. model function calculates propensity given current number prey parameters. mle_parameters list maximum likelihood estimated parameters required model function.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_bootstrapped_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Bootstrapped Samples — create_bootstrapped_samples","text":"data frame containing bootstrapped samples. data frame includes columns n_prey_initial, n_replicates, bootstrap_id bootstrap sample.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_pmf_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Log Probability Mass Function (PMF) — create_pmf_log","title":"Create a Log Probability Mass Function (PMF) — create_pmf_log","text":"Constructs function computes logarithm probability mass function (PMF) given number prey remaining based empirical data simulations Dirichlet process prior.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_pmf_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Log Probability Mass Function (PMF) — create_pmf_log","text":"","code":"create_pmf_log(simulation_result, n_prey_initial, alpha)"},{"path":"https://ben18785.github.io/frbayes/reference/create_pmf_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Log Probability Mass Function (PMF) — create_pmf_log","text":"simulation_result dataframe containing simulation results column n_prey_remaining indicating number prey remaining. n_prey_initial integer representing initial number prey. defines range possible values n_prey_remaining. alpha numeric value representing hyperparameter Dirichlet Process prior. controls influence prior posterior calculation.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_pmf_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Log Probability Mass Function (PMF) — create_pmf_log","text":"function takes single argument, n_prey_remaining, returns logarithm PMF value. input bounds non-negative integer, function returns -Inf.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_pmf_log.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Log Probability Mass Function (PMF) — create_pmf_log","text":"function generates log probability mass function (PMF) first calculating empirical PMF simulation results using compute logarithm PMF specified numbers prey remaining. function handles valid invalid inputs provides appropriate outputs.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_pmf_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Log Probability Mass Function (PMF) — create_pmf_log","text":"","code":"# Example data frame from simulations simulation_result <- tibble::tibble(n_prey_remaining = c(0, 1, 2, 1, 0, 2)) n_prey_initial <- 2 alpha <- 1  # Create the log PMF function pmf_log_function <- frbayes:::create_pmf_log(simulation_result, n_prey_initial, alpha)  # Use the log PMF function log_prob_0 <- pmf_log_function(0) log_prob_1 <- pmf_log_function(1) log_prob_2 <- pmf_log_function(2)  # Check behavior for out-of-bounds values log_prob_neg <- pmf_log_function(-1) log_prob_out_of_bound <- pmf_log_function(3)"},{"path":"https://ben18785.github.io/frbayes/reference/create_study_ecdfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Empirical CDFs for Prey Eaten Data — create_study_ecdfs","title":"Create Empirical CDFs for Prey Eaten Data — create_study_ecdfs","text":"function computes empirical cumulative distribution functions (ECDFs) number prey eaten, grouped initial number prey.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_study_ecdfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Empirical CDFs for Prey Eaten Data — create_study_ecdfs","text":"","code":"create_study_ecdfs(data)"},{"path":"https://ben18785.github.io/frbayes/reference/create_study_ecdfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Empirical CDFs for Prey Eaten Data — create_study_ecdfs","text":"data data frame containing experimental data, include columns n_prey_initial n_prey_eaten.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_study_ecdfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Empirical CDFs for Prey Eaten Data — create_study_ecdfs","text":"data frame columns n_prey_eaten, ecdf, n_prey_initial.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/create_study_ecdfs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Empirical CDFs for Prey Eaten Data — create_study_ecdfs","text":"function calculates ECDF number prey eaten unique value n_prey_initial input data. ECDF computed range possible values number prey eaten, 0 initial number prey.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/log_probability.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Log Probability of Observed Data Given a Model — log_probability","title":"Compute the Log Probability of Observed Data Given a Model — log_probability","text":"function computes log probability observing given data specified model parameters. computation based simulations prey dynamics, using Dirichlet Process prior posterior methods estimate probability mass function.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/log_probability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Log Probability of Observed Data Given a Model — log_probability","text":"","code":"log_probability(   parameters,   data,   model,   time_max = 1,   n_replicates = 1000,   alpha = 1 )"},{"path":"https://ben18785.github.io/frbayes/reference/log_probability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Log Probability of Observed Data Given a Model — log_probability","text":"parameters named list vector parameters model. data data frame tibble containing observed data. must include least following columns: n_prey_initial: integer indicating initial number prey. n_prey_remaining: integer indicating number prey remaining end observation period. model function calculates propensity prey consumption based current state parameters. time_max positive numeric value specifying maximum time simulation. Defaults 1. n_replicates positive integer specifying number replicates simulation. Defaults 1000. alpha positive numeric value representing Dirichlet Process hyperparameter. Defaults 1.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/log_probability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Log Probability of Observed Data Given a Model — log_probability","text":"numeric value representing total log probability observed data given model parameters.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/log_probability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Log Probability of Observed Data Given a Model — log_probability","text":"function first validates input arguments, including data format value constraints. computes log probability unique initial prey count dataset simulating dynamics using Dirichlet Process posterior. final log probability sum log probabilities across unique initial prey counts.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/log_probability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Log Probability of Observed Data Given a Model — log_probability","text":"","code":"# Example usage: parameters <- list(rate = 0.1) data <- tibble::tibble(   n_prey_initial = c(10, 20, 30),   n_prey_remaining = c(5, 10, 15) ) model <- function(prey, parameters) {   parameters$rate * prey } log_prob <- log_probability(parameters, data, model, time_max = 1, n_replicates = 1000, alpha = 1) print(log_prob) #> [1] -29.60267"},{"path":"https://ben18785.github.io/frbayes/reference/log_probability_single_prey_initial.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Log Probability of Multiple Prey Remaining States — log_probability_single_prey_initial","title":"Calculate Log Probability of Multiple Prey Remaining States — log_probability_single_prey_initial","text":"Computes log probability observing specific numbers prey remaining simulation based model, given initial number prey parameters. function uses simulated data estimate log probability state using probability mass function (PMF) aggregates probabilities list prey remaining states.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/log_probability_single_prey_initial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Log Probability of Multiple Prey Remaining States — log_probability_single_prey_initial","text":"","code":"log_probability_single_prey_initial(   parameters,   ns_prey_remaining,   n_prey_initial,   model,   time_max,   n_replicates = 1000,   alpha = 1 )"},{"path":"https://ben18785.github.io/frbayes/reference/log_probability_single_prey_initial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Log Probability of Multiple Prey Remaining States — log_probability_single_prey_initial","text":"parameters list vector containing parameters required model function. specific parameters depend model used. ns_prey_remaining numeric vector integers representing different states prey remaining log probability needs calculated. n_prey_initial integer specifying initial number prey. used define range possible values prey remaining. model function computes propensity rate change based number prey remaining parameters provided. model compatible simulation function. time_max numeric value representing maximum time simulation. n_replicates integer specifying number simulation runs perform. Default 1000. alpha numeric parameter Dirichlet process prior. Default 1.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/log_probability_single_prey_initial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Log Probability of Multiple Prey Remaining States — log_probability_single_prey_initial","text":"numeric value representing total log probability observing specified states prey remaining. sum log probabilities value ns_prey_remaining.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/log_probability_single_prey_initial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Log Probability of Multiple Prey Remaining States — log_probability_single_prey_initial","text":"function first generates simulated data using given model parameters, creates log PMF function data. calculates log probability specified number prey remaining summing log PMF values.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/log_probability_single_prey_initial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Log Probability of Multiple Prey Remaining States — log_probability_single_prey_initial","text":"","code":"# Example usage parameters <- list(rate = 0.1) # Example parameter for a constant rate model ns_prey_remaining <- c(0, 1, 2) # States of prey remaining n_prey_initial <- 2 model <- model_stochastic_degradation() # Using a constant rate model time_max <- 10  # Compute log probabilities log_prob <- frbayes:::log_probability_single_prey_initial(   parameters = parameters,   ns_prey_remaining = ns_prey_remaining,   n_prey_initial = n_prey_initial,   model = model,   time_max = time_max,   n_replicates = 1000,   alpha = 1 )"},{"path":"https://ben18785.github.io/frbayes/reference/model_generalised_holling.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Generalized Holling Model Function for Prey-Predator Simulation — model_generalised_holling","title":"Generate a Generalized Holling Model Function for Prey-Predator Simulation — model_generalised_holling","text":"function returns model function based Generalized Holling model, describes rate prey consumption function number prey three parameters: b (maximum rate consumption), h (handling time), q (type functional response).","code":""},{"path":"https://ben18785.github.io/frbayes/reference/model_generalised_holling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Generalized Holling Model Function for Prey-Predator Simulation — model_generalised_holling","text":"","code":"model_generalised_holling()"},{"path":"https://ben18785.github.io/frbayes/reference/model_generalised_holling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Generalized Holling Model Function for Prey-Predator Simulation — model_generalised_holling","text":"function calculates propensity prey consumption based current number prey set parameters. returned function takes two arguments: prey Numeric representing current number prey. parameters list containing parameters model. Must include:","code":""},{"path":"https://ben18785.github.io/frbayes/reference/model_generalised_holling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Generalized Holling Model Function for Prey-Predator Simulation — model_generalised_holling","text":"Generalized Holling model defined : $$ \\text{rate} = \\frac{b \\cdot \\text{prey}^{(1 + q)}}{1 + b \\cdot h \\cdot \\text{prey}^{(1 + q)} }$$ b maximum rate consumption, h handling time, q modifies type functional response.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/model_generalised_holling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Generalized Holling Model Function for Prey-Predator Simulation — model_generalised_holling","text":"","code":"model <- model_generalised_holling() parameters <- list(b = 0.5, h = 0.2, q = 1) model(10, parameters) # Computes the rate of prey consumption for 10 prey #> [1] 4.545455"},{"path":"https://ben18785.github.io/frbayes/reference/model_rogersII.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Rogers II Model Function for Prey-Predator Simulation — model_rogersII","title":"Generate a Rogers II Model Function for Prey-Predator Simulation — model_rogersII","text":"function returns model function based Rogers II model, rate prey consumption described functional response depends current number prey two parameters: (maximum rate consumption) h (handling time).","code":""},{"path":"https://ben18785.github.io/frbayes/reference/model_rogersII.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Rogers II Model Function for Prey-Predator Simulation — model_rogersII","text":"","code":"model_rogersII()"},{"path":"https://ben18785.github.io/frbayes/reference/model_rogersII.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Rogers II Model Function for Prey-Predator Simulation — model_rogersII","text":"function calculates propensity prey consumption based current number prey set parameters. returned function takes two arguments: prey Numeric representing current number prey. parameters list containing parameters model. Must include:","code":""},{"path":"https://ben18785.github.io/frbayes/reference/model_rogersII.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Rogers II Model Function for Prey-Predator Simulation — model_rogersII","text":"Rogers II model defined : $$ \\text{rate} = \\frac{\\cdot \\text{prey}}{1 + \\cdot h \\cdot \\text{prey}} $$ maximum rate consumption h handling time.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/model_rogersII.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Rogers II Model Function for Prey-Predator Simulation — model_rogersII","text":"","code":"model <- model_rogersII() parameters <- list(a = 0.2, h = 0.5) model(10, parameters) # Computes the rate of prey consumption for 10 prey #> [1] 1"},{"path":"https://ben18785.github.io/frbayes/reference/model_stochastic_degradation.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Constant Rate Model for Prey-Predator Simulation — model_stochastic_degradation","title":"Generate a Constant Rate Model for Prey-Predator Simulation — model_stochastic_degradation","text":"function returns model function rate prey consumption constant proportional current number prey. returned function can used simulations prey-predator interactions.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/model_stochastic_degradation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Constant Rate Model for Prey-Predator Simulation — model_stochastic_degradation","text":"","code":"model_stochastic_degradation()"},{"path":"https://ben18785.github.io/frbayes/reference/model_stochastic_degradation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Constant Rate Model for Prey-Predator Simulation — model_stochastic_degradation","text":"function computes propensity prey consumption based current number prey set parameters. returned function takes two arguments: prey Integer representing current number prey. parameters list containing parameters model. Must include:","code":""},{"path":"https://ben18785.github.io/frbayes/reference/model_stochastic_degradation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Constant Rate Model for Prey-Predator Simulation — model_stochastic_degradation","text":"","code":"model <- model_stochastic_degradation() parameters <- list(rate = 0.1) model(10, parameters) # Returns 1.0 #> [1] 1"},{"path":"https://ben18785.github.io/frbayes/reference/model_typeIII.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Type III Model Function for Prey-Predator Simulation — model_typeIII","title":"Generate a Type III Model Function for Prey-Predator Simulation — model_typeIII","text":"function returns model function based Type III functional response model, rate prey consumption described quadratic function number prey two parameters: b (maximum rate consumption) h (handling time).","code":""},{"path":"https://ben18785.github.io/frbayes/reference/model_typeIII.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Type III Model Function for Prey-Predator Simulation — model_typeIII","text":"","code":"model_typeIII()"},{"path":"https://ben18785.github.io/frbayes/reference/model_typeIII.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Type III Model Function for Prey-Predator Simulation — model_typeIII","text":"function calculates propensity prey consumption based current number prey set parameters. returned function takes two arguments: prey Numeric representing current number prey. parameters list containing parameters model. Must include:","code":""},{"path":"https://ben18785.github.io/frbayes/reference/model_typeIII.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Type III Model Function for Prey-Predator Simulation — model_typeIII","text":"Type III model defined : $$ \\text{rate} = \\frac{b \\cdot \\text{prey}^2}{1 + b \\cdot h \\cdot \\text{prey}^2} $$ b maximum rate consumption h handling time.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/model_typeIII.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Type III Model Function for Prey-Predator Simulation — model_typeIII","text":"","code":"model <- model_typeIII() parameters <- list(b = 0.3, h = 0.7) model(10, parameters) # Computes the rate of prey consumption for 10 prey #> [1] 1.363636"},{"path":"https://ben18785.github.io/frbayes/reference/simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Multiple Runs of a Prey-Predator Model — simulate","title":"Simulate Multiple Runs of a Prey-Predator Model — simulate","text":"function simulates multiple runs prey-predator model, initial conditions parameters, returns summary results.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Multiple Runs of a Prey-Predator Model — simulate","text":"","code":"simulate(n_replicates, n_prey_initial, time_max, model, parameters)"},{"path":"https://ben18785.github.io/frbayes/reference/simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Multiple Runs of a Prey-Predator Model — simulate","text":"n_replicates integer representing number replicate simulations perform. n_prey_initial integer representing initial number prey. time_max numeric value indicating maximum time simulation. model function calculates propensity given current number prey parameters. parameters list named parameters required model function.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/simulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Multiple Runs of a Prey-Predator Model — simulate","text":"tibble columns n_prey_initial, n_prey_eaten, n_prey_remaining, summarizing results simulations. row represents single simulation replicate.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/simulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Multiple Runs of a Prey-Predator Model — simulate","text":"","code":"# Define a simple linear model for the propensity model <- function(n_prey, params) {   rate <- params$rate   return(rate * n_prey) }  # Set the number of replicates, initial number of prey, maximum time, and model parameters n_replicates <- 10 n_prey_initial <- 100 time_max <- 10 parameters <- list(rate = 0.1)  # Run the simulations simulate(n_replicates, n_prey_initial, time_max, model, parameters) #> # A tibble: 10 × 4 #>    replicate_id n_prey_initial n_prey_eaten n_prey_remaining #>           <int>          <dbl>        <dbl>            <int> #>  1            1            100           66               34 #>  2            2            100           59               41 #>  3            3            100           63               37 #>  4            4            100           67               33 #>  5            5            100           60               40 #>  6            6            100           63               37 #>  7            7            100           63               37 #>  8            8            100           61               39 #>  9            9            100           62               38 #> 10           10            100           64               36"},{"path":"https://ben18785.github.io/frbayes/reference/simulate_many_trajectories.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Multiple Runs of a Prey-Predator Model — simulate_many_trajectories","title":"Simulate Multiple Runs of a Prey-Predator Model — simulate_many_trajectories","text":"function simulates multiple runs prey-predator model specified period time, given initial conditions model parameters. simulation algorithm used Gillespie algorithm.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/simulate_many_trajectories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Multiple Runs of a Prey-Predator Model — simulate_many_trajectories","text":"","code":"simulate_many_trajectories(   n_trajectories,   n_prey_initial,   time_max,   model,   parameters )"},{"path":"https://ben18785.github.io/frbayes/reference/simulate_many_trajectories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Multiple Runs of a Prey-Predator Model — simulate_many_trajectories","text":"n_trajectories integer representing number trajectories simulate. n_prey_initial integer representing initial number prey trajectory. time_max numeric value indicating maximum time simulations. model function calculates propensity given current number prey parameters. parameters list named parameters required model function.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/simulate_many_trajectories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Multiple Runs of a Prey-Predator Model — simulate_many_trajectories","text":"data frame columns time, n_prey_remaining, n_prey_eaten, trajectory_id, representing simulated data trajectories.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/simulate_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Study with Multiple Prey Initial Conditions — simulate_study","title":"Simulate a Study with Multiple Prey Initial Conditions — simulate_study","text":"function performs simulations study based varying initial prey counts. uses provided model parameters generate simulation results combines results single dataframe.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/simulate_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Study with Multiple Prey Initial Conditions — simulate_study","text":"","code":"simulate_study(data, time_max, model, parameters)"},{"path":"https://ben18785.github.io/frbayes/reference/simulate_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Study with Multiple Prey Initial Conditions — simulate_study","text":"data dataframe containing study parameters. must include following columns: prey_initial: integer indicating initial density prey. n_replicates: integer specifying number replicates prey_initial. time_max positive numeric value specifying maximum time simulation. model function representing model used simulation. parameters list parameters passed model function.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/simulate_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Study with Multiple Prey Initial Conditions — simulate_study","text":"dataframe containing simulation results.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/simulate_study.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a Study with Multiple Prey Initial Conditions — simulate_study","text":"function first validates inputs ensure meet required specifications. iterates unique values initial prey density, performs simulations value, combines results single dataframe. dataframe one row per unique prey_initial value input validations fail, function stop error message.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/simulate_study.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Study with Multiple Prey Initial Conditions — simulate_study","text":"","code":"# Example usage (assuming appropriate model and parameters): data <- data.frame(n_prey_initial = c(10, 20, 30), n_replicates = c(100, 100, 100)) time_max <- 10 model <- model_stochastic_degradation() parameters <- list(rate = 0.1) result <- simulate_study(data, time_max, model, parameters)"},{"path":"https://ben18785.github.io/frbayes/reference/simulate_trajectory.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Single Run of a Prey-Predator Model — simulate_trajectory","title":"Simulate a Single Run of a Prey-Predator Model — simulate_trajectory","text":"function simulates single run prey-predator model specified period time, given initial conditions model parameters. simulation algorithm used Gillespie algorithm.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/simulate_trajectory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Single Run of a Prey-Predator Model — simulate_trajectory","text":"","code":"simulate_trajectory(n_prey_initial, time_max, model, parameters)"},{"path":"https://ben18785.github.io/frbayes/reference/simulate_trajectory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Single Run of a Prey-Predator Model — simulate_trajectory","text":"n_prey_initial integer representing initial number prey. time_max numeric value indicating maximum time simulation. model function calculates propensity given current number prey parameters. parameters list named parameters required model function.","code":""},{"path":"https://ben18785.github.io/frbayes/reference/simulate_trajectory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Single Run of a Prey-Predator Model — simulate_trajectory","text":"data frame numbers prey remaining (eaten) time.","code":""}]
